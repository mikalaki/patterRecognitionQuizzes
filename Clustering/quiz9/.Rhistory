lines(density(x), lty = 2, lwd = 2)
#plotting model we got with the actual distribution
plot(model, which = 2)
lines(density(x), lty = 2, lwd = 2)
model$mu
model <- normalmixEM(x, mu = c(0,1), sd.constr = c(1,1))
model$mu
model$lambda
model$loglik
model <- normalmixEM(x, mu = c(0,1), sd.constr = c(1,1))
model$mu
model$lambda
model$loglik
model <- normalmixEM(x, mu = c(0,1), sd.constr = c(1,1))
model$mu
model$lambda
model$loglik
model <- normalmixEM(x, mu = c(0,1), sd.constr = c(1,1))
model$mu
model$lambda
model$loglik
model <- normalmixEM(x, mu = c(0,1), sd.constr = c(1,1))
model$mu
model$lambda
model$loglik
model <- normalmixEM(x, mu = c(0,1), sd.constr = c(1,1))
model$mu
model$lambda
model$loglik
model <- normalmixEM(x, mu = c(0,1), sd.constr = c(1,1))
model$mu
model$lambda
model$loglik
model <- normalmixEM(x, mu = c(0,1), sd.constr = c(1,1))
model$mu
model$lambda
model$loglik
model <- normalmixEM(x, mu = c(0,1), sd.constr = c(1,1))
model$mu
model$lambda
model$loglik
model <- normalmixEM(x, mu = c(0,1), sd.constr = c(1,1))
model$mu
model$lambda
model$loglik
model <- normalmixEM(x, mu = c(0,1), sd.constr = c(1,1))
model$mu
model$lambda
model$loglik
model <- normalmixEM(x, mu = c(0,1), sd.constr = c(1,1))
model$mu
model$lambda
model$loglik
model <- normalmixEM(x, mu = c(0,1), sd.constr = c(1,1))
model$mu
model$lambda
model$loglik
model <- normalmixEM(x, mu = c(0,1), sd.constr = c(1,1))
model$mu
model$lambda
model$loglik
model <- normalmixEM(x, mu = c(0,1), sd.constr = c(1,1))
model$mu
model$lambda
model$loglik
#plotting model we got with the actual distribution
plot(model, which = 2)
lines(density(x), lty = 2, lwd = 2)
## GMMM multiple variables
library(cluster)
library(mixtools)
gsdata = read.csv("gsdata.txt", stringsAsFactors = TRUE)
target = gsdata[, 3]
gsdata = gsdata[, 1:2]
summary(gsdata)
gsdata = read.csv("gsdata.txt", stringsAsFactors = TRUE)
summary(gsdata)
## GMMM multiple variables
library(cluster)
library(mixtools)
gsdata = read.csv("gsdata.txt", stringsAsFactors = TRUE)
target = gsdata[, 3]
gsdata = gsdata[, 1:2]
plot(gsdata, col = target)
model = mvnormalmixEM(gsdata, k = 3 , epsilon = 0.1)
plot(model, which = 1)
plot(model, which = 2)
## GMMM multiple variables
library(cluster)
library(mixtools)
gsdata = read.csv("gsdata.txt", stringsAsFactors = TRUE)
target = gsdata[, 3]
gsdata = gsdata[, 1:2]
model = mvnormalmixEM(gsdata, k = 3 , epsilon = 0.1)
## GMMM multiple variables
library(cluster)
library(mixtools)
gsdata = read.csv("gsdata.txt", stringsAsFactors = TRUE)
target = gsdata[, 3]
gsdata = gsdata[, 1:2]
model = mvnormalmixEM(gsdata, k = 3 , epsilon = 0.1)
## GMMM multiple variables
library(cluster)
library(mixtools)
gsdata = read.csv("gsdata.txt", stringsAsFactors = TRUE)
target = gsdata[, 3]
gsdata = gsdata[, 1:2]
model = mvnormalmixEM(gsdata, k = 3 , epsilon = 0.1)
plot(model, which = 2)
plot(model, which = 2)
clusters = max.col(model$posterior
)
clusters
centers = matrix(unlist(model$mu), byrow = TRUE, ncol = 2)
centers
model_silhouette = silhouette(clusters, dist(gsdata))
plot(model_silhouette)
plot(model, which = 2)
plot(model, which = 2)
gsdata_ord = gsdata[order(clusters),]
heatmap(as.matrix(dist(gsdata _ord)), Rowv = NA, Colv = NA, col = heat.colors(256), revC = TRUE)
gsdata_ord = gsdata[order(clusters),]
heatmap(as.matrix(dist(gsdata_ord)), Rowv = NA, Colv = NA, col = heat.colors(256), revC = TRUE)
### Application with Information Criteria
icdata = read.csv("icdata.txt", stringsAsFactors = TRUE)
x = icdata[, 1]
y = icdata[, 2]
library(mixtools)
plot(data.frame(x, 0), ylim = c(-0.01, 0.1))
lines(density(x))
AIC = c()
BIC = c()
par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")", sep = ""))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
par(mfrow = c(1, 1))
AIC = c()
BIC = c()
par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")", sep = ""))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
library(mixtools)
plot(data.frame(x, 0), ylim = c(-0.01, 0.1))
lines(density(x))
AIC = c()
BIC = c()
par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")"))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
library(mixtools)
plot(data.frame(x, 0), ylim = c(-0.01, 0.1))
lines(density(x))
AIC = c()
BIC = c()
par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")"))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
library(mixtools)
plot(data.frame(x, 0), ylim = c(-0.01, 0.1))
lines(density(x))
AIC = c()
BIC = c()
par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")"))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
library(mixtools)
plot(data.frame(x, 0), ylim = c(-0.01, 0.1))
lines(density(x))
AIC = c()
BIC = c()
par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")"))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
library(mixtools)
plot(data.frame(x, 0), ylim = c(-0.01, 0.1))
lines(density(x))
AIC = c()
BIC = c()
par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")"))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
library(mixtools)
plot(data.frame(x, 0), ylim = c(-0.01, 0.1))
lines(density(x))
AIC = c()
BIC = c()
par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")", sep = ""))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
library(mixtools)
plot(data.frame(x, 0), ylim = c(-0.01, 0.1))
lines(density(x))
AIC = c()
BIC = c()
par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")", sep = ""))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
library(mixtools)
plot(data.frame(x, 0), ylim = c(-0.01, 0.1))
lines(density(x))
AIC = c()
BIC = c()
par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")", sep = ""))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
library(mixtools)
plot(data.frame(x, 0), ylim = c(-0.01, 0.1))
lines(density(x))
AIC = c()
BIC = c()
par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")", sep = ""))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
library(mixtools)
plot(data.frame(x, 0), ylim = c(-0.01, 0.1))
lines(density(x))
AIC = c()
BIC = c()
par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")", sep = ""))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
library(mixtools)
plot(data.frame(x, 0), ylim = c(-0.01, 0.1))
lines(density(x))
AIC = c()
BIC = c()
#par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")", sep = ""))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
library(mixtools)
plot(data.frame(x, 0), ylim = c(-0.01, 0.1))
lines(density(x))
AIC = c()
BIC = c()
#par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")", sep = ""))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
library(mixtools)
plot(data.frame(x, 0), ylim = c(-0.01, 0.1))
lines(density(x))
AIC = c()
BIC = c()
#par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")", sep = ""))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
library(mixtools)
plot(data.frame(x, 0), ylim = c(-0.01, 0.1))
lines(density(x))
AIC = c()
BIC = c()
#par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")", sep = ""))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
library(mixtools)
plot(data.frame(x, 0), ylim = c(-0.01, 0.1))
lines(density(x))
AIC = c()
BIC = c()
#par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")", sep = ""))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
library(mixtools)
plot(data.frame(x, 0), ylim = c(-0.01, 0.1))
lines(density(x))
AIC = c()
BIC = c()
#par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")", sep = ""))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
library(mixtools)
plot(data.frame(x, 0), ylim = c(-0.01, 0.1))
lines(density(x))
AIC = c()
BIC = c()
#par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")", sep = ""))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
library(mixtools)
plot(data.frame(x, 0), ylim = c(-0.01, 0.1))
lines(density(x))
AIC = c()
BIC = c()
#par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")", sep = ""))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
par(mfrow = c(1, 1))
plot(data.frame(x, 0), ylim = c(-0.01, 0.1))
lines(density(x))
AIC = c()
BIC = c()
#par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")", sep = ""))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
plot(data.frame(x, 0), ylim = c(-0.01, 0.1))
lines(density(x))
AIC = c()
BIC = c()
#par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")", sep = ""))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
AIC = c()
BIC = c()
par(mfrow = c(2, 2))
for (k in 2:5) {
model <- normalmixEM(x, k = k, epsilon = 0.0001)
plot(model, which = 2 , main2 = paste("Density (k = ", k, ")", sep = ""))
numparams = length(model$mu) + length(model$stdev) + length(model$lambda)
AIC[k] = 2 * numparams - 2 * model$loglik
BIC[k] = log(length(x)) * numparams - 2 * model$loglik
}
par(mfrow = c(1, 1))
getwd()
setwd("C:/Users/mikal/Desktop/Mathimata/7to9thSemester/pattern_recognition/labs/mySolutions/lab9")
### EM - GMM
kmdata = read.csv("kmdata.txt", stringsAsFactors = TRUE)
clc
kmdata
plot(kmdata)
plot(kmdata)
### EM - GMM
kmdata = read.csv("kmdata.txt", stringsAsFactors = TRUE)
target = kmdata[,3]
kmdata= kmdata[,c(1:2)]
plot(kmdata)
### EM - GMM
kmdata = read.csv("kmdata.txt", stringsAsFactors = TRUE)
target = kmdata[,3]
kmdata= kmdata[,c(1:2)]
plot(kmdata)
### EM - GMM
kmdata = read.csv("kmdata.txt", stringsAsFactors = TRUE)
target = kmdata[,3]
kmdata= kmdata[,c(1:2)]
plot(kmdata)
### EM - GMM
kmdata = read.csv("kmdata.txt", stringsAsFactors = TRUE)
target = kmdata[,3]
kmdata= kmdata[,c(1:2)]
plot(kmdata)
### EM - GMM
kmdata = read.csv("kmdata.txt", stringsAsFactors = TRUE)
target = kmdata[,3]
kmdata= kmdata[,c(1:2)]
plot(kmdata)
par(mfrow = c(1, 1))
### EM - GMM
kmdata = read.csv("kmdata.txt", stringsAsFactors = TRUE)
target = kmdata[,3]
kmdata= kmdata[,c(1:2)]
plot(kmdata)
plot(kmdata, col = target)
### EM - GMM
kmdata = read.csv("kmdata.txt", stringsAsFactors = TRUE)
target = kmdata[,3]
kmdata= kmdata[,c(1:2)]
plot(kmdata)
plot(kmdata, col = target)
model = kmeans(kmdata, centers = 3)
plot(model, which = 2)
,
plot(model, which = 2)
plot(model)
model = kmeans(kmdata, centers = 3)
plot(model, col = model$cluster)
model = kmeans(kmdata, centers = 3)
plot(model, col = model$cluster)
model = kmeans(kmdata, centers = 3)
plot(model, col = model$cluster)
model = kmeans(kmdata, centers = 3)
plot(model, col = model$cluster)
View(kmdata)
model = kmeans(kmdata, centers = 3)
plot(kmdata, col = model$cluster)
model = kmeans(kmdata, centers = 3)
plot(kmdata, col = model$cluster)
plot(kmdata, col = model$cluster)
model = kmeans(kmdata, centers = 3)
plot(kmdata, col = model$cluster)
plot(kmdata, col = model$cluster)
plot(kmdata, col = target)
plot(kmdata, col = model$cluster)
plot(kmdata, col = model$cluster, pch=15, main="k-means")
points(model$centers, col = 4, pch = "+", cex = 2)
model_gmm = mvnormalmixEM(kmdata, k = 3 , epsilon = 0.01)
plot(kmdata, col = max.col(model_gmm$posterior), pch=15, main="gmm")
points(matrix(unlist(model_gmm$mu), byrow = TRUE, ncol = 2), col = 4, pch = "+", cex = 2)
model_gmm = mvnormalmixEM(kmdata, k = 3 , epsilon = 0.01)
plot(kmdata, col = max.col(model_gmm$posterior), pch=15, main="gmm")
points(matrix(unlist(model_gmm$mu), byrow = TRUE, ncol = 2), col = 4, pch = "+", cex = 2)
model_gmm = mvnormalmixEM(kmdata, k = 3 , epsilon = 0.01)
plot(kmdata, col = max.col(model_gmm$posterior), pch=15, main="gmm")
points(matrix(unlist(model_gmm$mu), byrow = TRUE, ncol = 2), col = 4, pch = "+", cex = 2)
model_gmm = mvnormalmixEM(kmdata, k = 3 , epsilon = 0.01)
plot(kmdata, col = max.col(model_gmm$posterior), pch=15, main="gmm")
points(matrix(unlist(model_gmm$mu), byrow = TRUE, ncol = 2), col = 4, pch = "+", cex = 2)
model_gmm = mvnormalmixEM(kmdata, k = 3 , epsilon = 0.01)
plot(kmdata, col = max.col(model_gmm$posterior), pch=15, main="gmm")
points(matrix(unlist(model_gmm$mu), byrow = TRUE, ncol = 2), col = 4, pch = "+", cex = 2)
model_gmm = mvnormalmixEM(kmdata, k = 3 , epsilon = 0.01)
plot(kmdata, col = max.col(model_gmm$posterior), pch=15, main="gmm")
points(matrix(unlist(model_gmm$mu), byrow = TRUE, ncol = 2), col = 4, pch = "+", cex = 2)
plot(kmdata, col = target)
